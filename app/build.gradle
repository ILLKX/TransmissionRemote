apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion compile_sdk_version
    buildToolsVersion '28.0.3'
    defaultConfig {
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode version_code
        versionName "$version_name"
        applicationId 'net.yupol.transmissionremote.app'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        manifestPlaceholders = [fabricApiKey: "${apiKey('fabric_api_key')}"]

        vectorDrawables.useSupportLibrary = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            lintOptions {
                disable 'MissingTranslation'
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    dataBinding {
        enabled true
    }

    useLibrary 'org.apache.http.legacy'
}

dependencies {
    implementation project(':domain')
    implementation project(':data')
    implementation project(':device')
    implementation project(':model')
    implementation project(':utils')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Support Library
    implementation "com.android.support:appcompat-v7:$support_version"
    implementation "com.android.support:support-v4:$support_version"
    implementation "com.android.support:recyclerview-v7:$support_version"
    implementation "com.android.support:design:$support_version"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"

    // Guava
    implementation "com.google.guava:guava:$guava_version"

    // Apache Commons
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'org.apache.commons:commons-lang3:3.5'

    // GSON
    implementation "com.google.code.gson:gson:$gson_version"

    // Material Drawer
    implementation('com.mikepenz:materialdrawer:6.0.8@aar') {
        transitive = true
    }

    // Iconics
    implementation "com.mikepenz:iconics-core:$iconics_version"
    implementation "com.mikepenz:iconics-views:$iconics_version"
    implementation 'com.mikepenz:google-material-typeface:3.0.1.3.original@aar'
    implementation "com.mikepenz:fontawesome-typeface:$iconics_font_awesome_version"
    implementation "com.mikepenz:community-material-typeface:$iconics_community_material_version"
    implementation 'com.mikepenz:ionicons-typeface:2.0.1.5@aar'

    // Indeterminate Checkbox
    implementation 'com.github.sevar83:indeterminate-checkbox:1.0.5@aar'

    // Crashlytics
    implementation("com.crashlytics.sdk.android:crashlytics:$crashlytics_version") {
        transitive = true
    }

    // Floating Action Button
    implementation 'com.getbase:floatingactionbutton:1.10.1'

    // Evernote Android Job
    implementation 'com.evernote:android-job:1.2.2'

    // Mosby
    implementation "com.hannesdorfmann.mosby3:mvp:$mosby_version"
    implementation "com.hannesdorfmann.mosby3:mvp-nullobject-presenter:$mosby_version"

    // Emoji
    implementation "com.vdurmont:emoji-java:$emoji_java_version"

    // Constraint Layout
    implementation "com.android.support.constraint:constraint-layout:$constraint_layout_version"

    // ButterKnife
    implementation "com.jakewharton:butterknife:$butterknife_version"
    kapt "com.jakewharton:butterknife-compiler:$butterknife_version"

    // Android KTX
    implementation "androidx.core:core-ktx:$ktx_version"

    // Dagger 2
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "javax.inject:javax.inject:$javax_inject_version"

    // Moshi
    implementation "com.squareup.moshi:moshi:$moshi_version"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi_version"
    implementation "com.serjltt.moshi:moshi-lazy-adapters:$moshi_lazy_adapters_version"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-moshi:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Testing
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
}

def property(String fileName, String propertyName) {
    def propsFile = rootProject.file(fileName)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propertyName] != null) {
            return props[propertyName]
        } else {
            throw new GradleException("There is no '" + propertyName + "' property in '" + propsFile.name + "' file")
        }
    } else {
        throw new GradleException("'" + propsFile.name + "' file does not exist")
    }
}

def apiKey(String name) {
    return property("api_keys.properties", name)
}
